<<<<<<< HEAD
{% extends 'BLOGTemplateBundle:Theme:template.html.twig' %}

{% block title %}{{ parent() }}Visualiser{% endblock %}
=======
{% extends "BLOGTemplateBundle::theme/template.html.twig" %}

{% block title %}{{ parent() }}Accueil{% endblock %}
>>>>>>> e018118032b7aced85cc291e0ba63f74affd730b
		
{% block body %}	
	
	<style type="text/css">
		#rendu {
			//overflow:hidden;
			background-color: #E6E6E6;				
			width:600px;
			height:400px;
			border: 1px solid black;								
					
			position: relative;
		}
	</style>	
			
	<script src="{{ asset('three/build/three.min.js') }}"></script>
	<script src="{{ asset('three/js/loaders/STLLoader.js') }}"></script>
	<script src="{{ asset('three/js/Detector.js') }}"></script>
	<script src="{{ asset('three/js/libs/stats.min.js') }}"></script>
	
	<br>
	<h2>n°{{ base.id }} : {{ base.title }}</h2>		
	<p>Publié par {{ base.author }}</p>
	<br>
<<<<<<< HEAD
	<center>
		<div id="rendu"></div>
		<br><br>
		<div style="width: 80%; padding:20px; border:solid #D8D8D8 1px; background:#F2F2F2;">
			<p>{{ base.content }}</p>	
			<br>
			<p>
				<a class="btn btn-primary" href="{{ asset('three/models/batterie box.stl') }}" role="button">Telecharger</a> 
				<a class="btn btn-primary" href="http://my3dcollection.herokuapp.com/edit/{{ base.id }}" role="button">Modifier</a> 
				<a class="btn btn-danger" href="http://my3dcollection.herokuapp.com/delete/{{ base.id }}" role="button">Suprimer</a>  
			</p>		
		</div>
	</center>
=======
	<center><div id="rendu"></div></center>
	<br>
	<p>{{ base.content }}</p>	
	<p><a class="btn btn-primary" href="view/{{ base.id }}" role="button">Telecharger</a></p>		
>>>>>>> e018118032b7aced85cc291e0ba63f74affd730b
			
		
		
			
<<<<<<< HEAD
=======
						
			


			
			
>>>>>>> e018118032b7aced85cc291e0ba63f74affd730b
		<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
			var container, stats;
			var camera, cameraTarget, scene, renderer;
			init();
			animate();
			
			
			
			function onDocumentMouseMove(event) {
				event.preventDefault();

				//if (event.isMouseDown) {
					theta = - ( ( event.clientX - onMouseDownPosition.x ) * 0.5 )+ onMouseDownTheta;
					phi = ( ( event.clientY - onMouseDownPosition.y ) * 0.5 ) + onMouseDownPhi;
					phi = Math.min( 180, Math.max( 0, phi ) );

					camera.position.x = radious * Math.sin( theta * Math.PI / 360 )* Math.cos( phi * Math.PI / 360 );
					camera.position.y = radious * Math.sin( phi * Math.PI / 360 );
					camera.position.z = radious * Math.cos( theta * Math.PI / 360 )* Math.cos( phi * Math.PI / 360 );
					camera.updateMatrix();
				//}

				mouse3D = projector.unprojectVector(new THREE.Vector3(
						( event.clientX / renderer.domElement.width ) * 2 - 1,
						- ( event.clientY / renderer.domElement.height ) * 2 + 1,
						0.5
					),
					camera
				);
				ray.direction = mouse3D.subSelf( camera.position ).normalize();

				interact();
				render();
			}
			

			function init() {

				container = document.getElementById( 'rendu' );

				camera = new THREE.PerspectiveCamera( 35, container.clientWidth/ container.clientHeight, 1, 15 );
				camera.position.set( 3, 0.15, 3 );
				cameraTarget = new THREE.Vector3( 0, -0.25, 0 );

				scene = new THREE.Scene();
				scene.fog = new THREE.Fog( 0x72645b, 2, 15 );


				// Ground
				/*var plane = new THREE.Mesh(
					new THREE.PlaneBufferGeometry( 20, 20 ),
					new THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010 } )
				);
				plane.rotation.x = -Math.PI/2;
				plane.position.y = -0.5;
				scene.add( plane );
				plane.receiveShadow = true;*/
				

				// Binary files
				var loader = new THREE.STLLoader();	
				var material = new THREE.MeshPhongMaterial( { color: 0x58ACFA, specular: 0x2EFE64, shininess: 2} );
				loader.load( "{{ asset('three/models/batterie box.stl') }}", function ( geometry ) {
					var mesh = new THREE.Mesh( geometry, material );
					mesh.position.set( 0, - 0.37, - 0.6 );
					mesh.rotation.set( - Math.PI / 2, 0, 0 );
					mesh.scale.set( 0.01,0.01, 0.01 );
					mesh.castShadow = true;
					mesh.receiveShadow = true;
					scene.add( mesh );
				} );

				
				var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.7 );
				directionalLight.position.set( 1, 1, 0 );
				scene.add( directionalLight );
				var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.7 );
				directionalLight.position.set( -1, 1, 0 );
				scene.add( directionalLight );
				
				// renderer
				renderer = new THREE.WebGLRenderer( { alpha: true } );
				renderer.setClearColor( scene.fog.color );
				//renderer.setClearColor( 0x819FF7, 0);
				renderer.setClearColor( 0x000000, 0 ); // the default
				//renderer.setClearColorHex( 0x000000, 1 );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( container.clientWidth, container.clientHeight );
				renderer.gammaInput = true;
				renderer.gammaOutput = true;
				renderer.shadowMap.enabled = true;
				renderer.shadowMap.cullFace = THREE.CullFaceBack;
				container.appendChild( renderer.domElement );

				// stats
				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );
				
				container.addEventListener("mousemove", onDocumentMouseMove);
			}

			
			function addShadowedLight( x, y, z, color, intensity ) {

				var directionalLight = new THREE.DirectionalLight( color, intensity );
				directionalLight.position.set( x, y, z );
				scene.add( directionalLight );

				directionalLight.castShadow = true;
				 directionalLight.shadowCameraVisible = true;

				var d = 1;
				directionalLight.shadowCameraLeft = -d;
				directionalLight.shadowCameraRight = d;
				directionalLight.shadowCameraTop = d;
				directionalLight.shadowCameraBottom = -d;

				directionalLight.shadowCameraNear = 1;
				directionalLight.shadowCameraFar = 4;

				directionalLight.shadowMapWidth = 1024;
				directionalLight.shadowMapHeight = 1024;

				directionalLight.shadowBias = -0.005;
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}

			function animate() {
				requestAnimationFrame( animate );
				render();
				stats.update();
			}

			function render() {
				var timer = Date.now() * 0.0005;
				camera.position.x = Math.cos( timer ) * 3;
				camera.position.z = Math.sin( timer ) * 3;
				camera.lookAt( cameraTarget );
				renderer.render( scene, camera );
			}
			

		</script>
	
		
{% endblock %}